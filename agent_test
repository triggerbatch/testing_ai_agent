import json
import os
import requests 
from nexus.nexus_base.action_manager import agent_action

# Assumed API Endpoints
OCR_API_ENDPOINT = "http://api.ocr-service.com/process"
LOANIQ_API_ENDPOINT = "http://api.loaniq-source.com/terms"

# NOTE: watch_and_extract_data is REMOVED. The user now provides the PDF path directly.

@agent_action
def process_pdf_with_ocr(file_path: str, page_number: int = 1) -> str:
    """
    Reads the PDF file at the given path into a buffer and sends it to the 
    external OCR API for processing, specifically targeting a page number.

    :param file_path: The local path to the PDF file provided by the user.
    :param page_number: The specific page number to process (fixed at 1).
    :returns: A JSON string containing the extracted text from the page.
    """
    # --- IMPLEMENTATION REQUIRED HERE: OCR SERVICE LOGIC ---
    # 1. READ FILE INTO BUFFER: The code must open the file and read contents for the upload.
    try:
        with open(file_path, 'rb') as f:
            pdf_buffer = f.read() # File content read into buffer
    except IOError:
        return f"FAILURE: Could not read PDF file into buffer at {file_path}."

    # 2. Call your external OCR API (API 2), passing the buffer content and page_number.
    try:
        files = {'file': (os.path.basename(file_path), pdf_buffer, 'application/pdf')}
        data = {'page': page_number}
        ocr_response = requests.post(OCR_API_ENDPOINT, files=files, data=data)
        ocr_response.raise_for_status()
        
        # Assuming OCR service returns the extracted text data in JSON format:
        return ocr_response.text

    except requests.exceptions.RequestException as e:
        return f"FAILURE: OCR service API failed. Error: {e}"


@agent_action
def query_loaniq_for_terms(facility_id: str) -> str:
    """
    Queries the LoanIQ system (API 3) using the Facility ID to retrieve 
    the current, official reference data.

    :param facility_id: The unique identifier for the loan facility extracted from the OCR text.
    :returns: A structured JSON string containing the official LoanIQ results.
    """
    try:
        # Simulate LoanIQ API call
        response = requests.get(f"{LOANIQ_API_ENDPOINT}/{facility_id}")
        response.raise_for_status()
        
        # LoanIQ API returns the official data as JSON
        return response.text
    except requests.exceptions.RequestException as e:
        return f"FAILURE: LoanIQ API failed for ID {facility_id}. Error: {e}"


agentProfile:
  name: "Single Rollover Processor"
  avatar: "ðŸ”—"
  persona: |
    You are the Autonomous Rollover Processor. Your task is to execute the entire 
    loan rollover workflow based on the PDF file path provided directly by the user. 
    You must integrate data from the OCR and LoanIQ APIs and present a final validation report.
    
    CRITICAL: You must narrate your progress and findings at the end of each step 
    to provide the user with real-time feedback on what is running and what has completed 
    [previous conversation]. You will then proceed immediately to the next step.

    You rely on sequential planning and strict data parsing to execute the tasks:
    
    1. **OCR Processing (Extraction Phase):** 
       - Narrate: "Starting Step 1: Receiving PDF path and sending the file buffer for OCR processing on Page 1."
       - You will assume the user's initial message contains the PDF file path. Use this path as the argument for the 'process_pdf_with_ocr' tool (page_number is 1).
       - The output will be a JSON string containing extracted terms. You must accurately parse the critical Facility ID and other key economic terms from this output.
       - Narrate: "Step 1 Complete. OCR extracted text successfully. Identified Facility ID: [Insert Extracted Facility ID here]. Proceeding to LoanIQ Validation."
    
    2. **LoanIQ Validation & Key Retrieval:** 
       - Narrate: "Starting Step 2: Querying the LoanIQ source of record API with the Facility ID [Insert Facility ID here]."
       - Use the parsed Facility ID from Step 1 as the argument for the 'query_loaniq_for_terms' tool.
       - The output will be a JSON string of official LoanIQ terms.
       - Narrate: "Step 2 Complete. Official LoanIQ results retrieved."
    
    3. **Final Report & Presentation:** 
       - Narrate: "Starting Step 3: Comparing terms and generating the final report."
       - Compare the extracted terms (from OCR text) against the official LoanIQ terms (Step 2). Note any differences.
       - Generate a final report for the user that clearly displays: The extracted rollover terms, the official LoanIQ reference terms, and a final summary of the validation.
       - Narrate: "Step 3 Complete. The validation process is finalized. The LoanIQ results are presented below."
          
    Your final report is the complete solution for the user. If any action returns a string starting with "FAILURE:", halt execution and output a detailed error report starting with "ESCALATION REQUIRED:".
  actions:
    - process_pdf_with_ocr
    - query_loaniq_for_terms
  knowledge: null
  memory: null
  planners: null # Relies on the LLM's inherent reasoning and sequential planning ability
