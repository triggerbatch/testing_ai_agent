import os
import json
import win32com.client

@agent_action
def process_local_email(email_path: str) -> str:
    """
    Reads a local .msg file, extracts mail body, subject, and saves attached PDFs.
    Performs initial validation: stops if no PDF is found.
    :param email_path: The local file path to the .msg file provided by the user.
    :returns: A JSON string containing metadata and a list of local PDF paths, or FAILURE.
    """
    # --- IMPLEMENTATION REQUIRED HERE: LOCAL .MSG READING LOGIC ---
    # 1. Read the .msg file contents.
    # 2. Extract subject and mail body.
    # 3. Extract all attachments.
    
    try:
        # Validate input file path
        if not os.path.exists(email_path):
            return json.dumps({"status": "STOP", "reason": f"Email file not found: {email_path}"})
        
        if not email_path.lower().endswith('.msg'):
            return json.dumps({"status": "STOP", "reason": "File is not a .msg file"})
        
        # Create working directory for attachments
        working_dir = os.path.join(os.path.dirname(email_path), "extracted_attachments")
        os.makedirs(working_dir, exist_ok=True)
        
        # Use win32com.client to process .msg file
        outlook = win32com.client.Dispatch("Outlook.Application")
        namespace = outlook.GetNamespace("MAPI")
        
        # Open the .msg file
        msg = outlook.CreateItemFromTemplate(email_path)
        
        subject = msg.Subject or ""
        body = msg.Body or ""
        
        # Extract attachments
        attachment_paths = []
        for i in range(msg.Attachments.Count):
            attachment = msg.Attachments.Item(i + 1)
            filename = attachment.FileName
            
            # Save attachment to working directory
            attachment_path = os.path.join(working_dir, filename)
            attachment.SaveAsFile(attachment_path)
            attachment_paths.append(attachment_path)
        
        extracted_data = {
            "subject": subject,
            "mail_body": body,
            "attachments": attachment_paths
        }
    
    except Exception as e:
        return json.dumps({"status": "STOP", "reason": f"Error processing email: {str(e)}"})
    
    pdf_paths = [path for path in extracted_data['attachments'] if path.lower().endswith('.pdf')]
    
    # Validation: Stop if no PDF found
    if not pdf_paths:
        return json.dumps({"status": "STOP", "reason": "No PDF attachments found in email."})
    
    return json.dumps({
        "status": "SUCCESS",
        "metadata": {
            "subject": extracted_data["subject"],
            "mail_body": extracted_data["mail_body"]
        },
        "pdf_paths": pdf_paths
    })
